def current_version = version

ext {
	log4j_version = '2.16.0'
 	junit_version = '4.12'
 	guava_version = '31.0.1-jre'
 	bouncy_castle_version = '1.70'
}

allprojects {
}

import java.text.SimpleDateFormat
import org.gradle.internal.jvm.Jvm

def static buildTime() {
	def df = new SimpleDateFormat("yyyy-MM-dd HH:mm") 
	df.setTimeZone(TimeZone.getTimeZone("UTC"))
	return df.format(new Date())
}

def currentBuildJvm = Jvm.current()
def currentBuildTime = buildTime()

wrapper {
	gradleVersion = gradle_version
}

subprojects {
	apply plugin: 'jacoco'
	apply plugin: 'eclipse'
    apply plugin: 'java'
    apply plugin: 'idea'

	repositories {
        mavenCentral()
    }

	dependencies {
		testImplementation "junit:junit:${junit_version}"
		implementation "org.apache.logging.log4j:log4j:${log4j_version}"
		implementation "com.google.guava:guava:${guava_version}"
	}

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
        withSourcesJar()
    }

	tasks.named('jar') {
		manifest {
			attributes "Built-By" : "$System.env.USERNAME",
					   "Built-With" : "Java ${-> currentBuildJvm}",
					   "Gradle-Version" : "${-> gradle.gradleVersion}",
				       "Specification-Title" : "${-> project.name.toUpperCase()}",
				       "Specification-Vendor" : "${-> vendor}",
				       "Specification-Version" : "${-> archiveVersion}",
				       "Implementation-Title" :	"${-> project.name}",
				       "Implementation-Vendor" : "${-> vendor}",
				       "Implementation-Version" : "${-> archiveVersion}"
        }
    }
	
	javadoc {
		def tagList = ["remarks:a:Remarks:",
					   "example:a:Example Code:", 
					   "format:a:Format:", 
					   "guidance:a:Recommended Reaction:"] 

		failOnError = false
		title="${project.name}, ${version} <br>API Specification"
		options.memberLevel = JavadocMemberLevel.PROTECTED
		options.author= true
		options.windowTitle = "${project.name}, ${version} - Java Documentation"
		options.header = "${project.name} ${version}"
		options.overview="src/main/java/overview.html"
		options.setTags(tagList)
	}

    jacocoTestReport {
       getAdditionalSourceDirs().from(files(sourceSets.main.allSource.srcDirs))
       getSourceDirectories().from(files(sourceSets.main.allSource.srcDirs))
       getClassDirectories().from(files(sourceSets.main.output))
       reports {
           html.required = true
		   html.outputLocation = file("$buildDir/reports/jacoco/html")
		   xml.required = false
           csv.required = false
        }
    }
		
	test {
        ignoreFailures = true
        
        testLogging {
            exceptionFormat = 'full'
        }
        
        jacoco {
            destinationFile = file("$buildDir/reports/jacoco/test.exec")
            reports {
	       		html.required = true
           		html.outputLocation = file("$buildDir/reports/jacoco/html")
           	}
        }    
    }

	group = 'at.co.sbs.gh.learning'
}

task createDistDirectory() {
	def distDir = file("${rootProject.projectDir}/distrib")
	distDir.mkdirs()
}

task jacocoRootReport(type: JacocoReport) {
    dependsOn = subprojects.test
    getExecutionData().from(files(subprojects.jacocoTestReport.executionData))
    getSourceDirectories().from(files(subprojects.sourceSets.main.allSource.srcDirs))
    getClassDirectories().from(files(subprojects.sourceSets.main.output))
    reports {
    	html.outputLocation = file("jacoco")
        html.required = true
        xml.required = true
        csv.required = false
    }
    onlyIf = {
        true
    }
    doFirst {
        //noinspection GroovyAccessibility
        executionData = files(executionData.findAll {
            it.exists()
        })
    }    
}

defaultTasks 'clean', 'build', 'javadoc'
// 'publish'
